plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}

android {
    namespace 'com.fan.sahdow'
    compileSdk 33

    defaultConfig {
        applicationId project.APP_APPLICATION_ID
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {

        debug {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.create("release")
            signingConfig.initWith(buildTypes.debug.signingConfig)
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    sourceSets {
        debug {
            assets.srcDir('build/generated/assets/test-shadow-case/debug/')
        }
        release {
            assets.srcDir('build/generated/assets/test-shadow-case/release/')
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
}

dependencies {

    implementation 'androidx.core:core-ktx:1.8.0'
    implementation 'androidx.appcompat:appcompat:1.4.1'
    implementation 'com.google.android.material:material:1.5.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.3'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation "androidx.test.espresso:espresso-idling-resource:$espresso_version"

    implementation "commons-io:commons-io:$commons_io_android_version"//example复制apk用的.
    implementation "org.slf4j:slf4j-api:$slf4j_version"
    implementation 'com.tencent.shadow.core:common'
    implementation 'com.tencent.shadow.core:loader'
    implementation 'com.tencent.shadow.core:activity-container'
}


def createCopyTask(projectName, buildType, name, apkName) {
    def split = (projectName as String).split(':')
    def moduleName = split[split.length - 1]
    def outputFile = file("${getBuildDir()}/generated/assets/${name}/${buildType}/${apkName}")
    outputFile.getParentFile().mkdirs()
    def inputFile = file("${project("${projectName}").getBuildDir()}/outputs/apk/plugin/${buildType}/${moduleName}-plugin-${buildType}.apk")
    return tasks.create("copy${buildType.capitalize()}${name.capitalize()}Task", Copy) {
        group = 'build'
        description = "复制${name}到assets中."
        from(inputFile.getParent()) {
            include(inputFile.name)
            rename { outputFile.name }
        }
        into(outputFile.getParent())

    }.dependsOn("${projectName}:assemblePlugin${buildType.capitalize()}")
}

tasks.whenTaskAdded { task ->
    if (task.name == "generateDebugAssets") {
        task.dependsOn createCopyTask(':test-shadow-case', 'debug', 'test-shadow-case', 'plugin.apk')
    }
}